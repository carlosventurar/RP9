import { Handler, HandlerEvent, HandlerContext } from '@netlify/functions'
import { createClient } from '@supabase/supabase-js'
import { z } from 'zod'

// Schema for subprocessor operations
const subprocessorSchema = z.object({
  action: z.enum(['list', 'create', 'update', 'delete', 'notify']),
  id: z.string().uuid().optional(),
  data: z.object({
    name: z.string().optional(),
    description: z.string().optional(),
    purpose: z.string().optional(),
    data_categories: z.array(z.string()).optional(),
    location: z.string().optional(),
    certification: z.array(z.string()).optional(),
    website_url: z.string().url().optional(),
    privacy_policy_url: z.string().url().optional()
  }).optional(),
  notification_type: z.enum(['addition', 'modification', 'removal']).optional()
})\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.SUPABASE_SERVICE_ROLE_KEY!\n)\n\n// Send notification emails (placeholder)\nasync function sendSubprocessorNotification(\n  subscriberEmail: string,\n  notificationType: string,\n  subprocessorName: string,\n  changeDetails: string\n) {\n  // In production, integrate with email service (Resend, SendGrid, etc.)\n  console.log(`Email notification sent to ${subscriberEmail}:`);\n  console.log(`Subject: Cambio en Subprocesadores - ${subprocessorName}`);\n  console.log(`Type: ${notificationType}`);\n  console.log(`Details: ${changeDetails}`);\n  \n  return true; // Placeholder success\n}\n\n// Notify all subscribers about subprocessor changes\nasync function notifySubscribers(notificationType: string, subprocessorName: string, changeDetails: string) {\n  const { data: subscriptions, error } = await supabase\n    .from('subprocessor_subscriptions')\n    .select('email, tenant_id')\n    .is('unsubscribed_at', null)\n\n  if (error) {\n    throw new Error(`Failed to fetch subscriptions: ${error.message}`)\n  }\n\n  if (!subscriptions || subscriptions.length === 0) {\n    console.log('No active subscriptions found')\n    return 0\n  }\n\n  let notificationsSent = 0\n  for (const subscription of subscriptions) {\n    try {\n      await sendSubprocessorNotification(\n        subscription.email,\n        notificationType,\n        subprocessorName,\n        changeDetails\n      )\n      notificationsSent++\n    } catch (error) {\n      console.error(`Failed to send notification to ${subscription.email}:`, error)\n    }\n  }\n\n  return notificationsSent\n}\n\nexport const handler: Handler = async (event: HandlerEvent, context: HandlerContext) => {\n  const corsHeaders = {\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n    'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n    'Content-Type': 'application/json'\n  }\n\n  if (event.httpMethod === 'OPTIONS') {\n    return { statusCode: 200, headers: corsHeaders, body: '' }\n  }\n\n  try {\n    // Handle GET requests (list subprocessors)\n    if (event.httpMethod === 'GET') {\n      const { data: subprocessors, error } = await supabase\n        .from('subprocessors')\n        .select('*')\n        .eq('status', 'active')\n        .order('name')\n\n      if (error) {\n        throw new Error(`Failed to fetch subprocessors: ${error.message}`)\n      }\n\n      return {\n        statusCode: 200,\n        headers: corsHeaders,\n        body: JSON.stringify({\n          success: true,\n          subprocessors: subprocessors || []\n        })\n      }\n    }\n\n    // Handle POST/PUT/DELETE requests\n    if (!event.body) {\n      return {\n        statusCode: 400,\n        headers: corsHeaders,\n        body: JSON.stringify({ error: 'Request body required' })\n      }\n    }\n\n    const requestData = JSON.parse(event.body)\n    const validation = subprocessorSchema.safeParse(requestData)\n    \n    if (!validation.success) {\n      return {\n        statusCode: 400,\n        headers: corsHeaders,\n        body: JSON.stringify({\n          error: 'Validation failed',\n          details: validation.error.issues\n        })\n      }\n    }\n\n    const { action, id, data, notification_type } = validation.data\n\n    switch (action) {\n      case 'list':\n        const { data: subprocessors, error: listError } = await supabase\n          .from('subprocessors')\n          .select('*')\n          .eq('status', 'active')\n          .order('name')\n\n        if (listError) throw new Error(listError.message)\n\n        return {\n          statusCode: 200,\n          headers: corsHeaders,\n          body: JSON.stringify({ success: true, subprocessors })\n        }\n\n      case 'create':\n        if (!data) {\n          return {\n            statusCode: 400,\n            headers: corsHeaders,\n            body: JSON.stringify({ error: 'Subprocessor data required' })\n          }\n        }\n\n        const { data: newSubprocessor, error: createError } = await supabase\n          .from('subprocessors')\n          .insert({\n            ...data,\n            added_date: new Date().toISOString(),\n            last_reviewed: new Date().toISOString(),\n            status: 'active'\n          })\n          .select()\n          .single()\n\n        if (createError) throw new Error(createError.message)\n\n        // Notify subscribers\n        await notifySubscribers(\n          'addition',\n          data.name || 'Nuevo Subprocesador',\n          `Se ha añadido un nuevo subprocesador: ${data.name}. Propósito: ${data.purpose}`\n        )\n\n        return {\n          statusCode: 201,\n          headers: corsHeaders,\n          body: JSON.stringify({\n            success: true,\n            subprocessor: newSubprocessor\n          })\n        }\n\n      case 'notify':\n        // Manual notification trigger\n        const notificationCount = await notifySubscribers(\n          notification_type || 'modification',\n          'Actualización de Subprocesadores',\n          'Se han realizado cambios en nuestra lista de subprocesadores. Revise la lista actualizada.'\n        )\n\n        return {\n          statusCode: 200,\n          headers: corsHeaders,\n          body: JSON.stringify({\n            success: true,\n            notifications_sent: notificationCount\n          })\n        }\n\n      default:\n        return {\n          statusCode: 400,\n          headers: corsHeaders,\n          body: JSON.stringify({ error: 'Invalid action' })\n        }\n    }\n\n  } catch (error) {\n    console.error('Error in subprocessors-manage:', error)\n    return {\n      statusCode: 500,\n      headers: corsHeaders,\n      body: JSON.stringify({\n        error: 'Operation failed',\n        message: error instanceof Error ? error.message : 'Unknown error'\n      })\n    }\n  }\n}\n\nexport { subprocessorSchema, sendSubprocessorNotification }